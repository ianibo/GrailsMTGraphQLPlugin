buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    }
}

version "0.1.8-SNAPSHOT"
group "com.semweb"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-plugin-publish"

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-core"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    compile 'com.graphql-java:graphql-java:13.0'
    console "org.grails:grails-console"
    profile "org.grails.profiles:plugin"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"

    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
}

bootRun {
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}
// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false
grailsPublish {
    // TODO: Provide values here
    user = 'user'
    key = 'key'
    githubSlug = 'foo/bar'
    license {
        name = 'Apache-2.0'
    }
    title = "My Plugin"
    desc = "Full plugin description"
    developers = [johndoe:"John Doe"]
}

task dopub(dependsOn: 'build') {
  if(project.version.endsWith('-SNAPSHOT')) {
    // publishMavenPublicationToKISnapshotsRepository.execute()
    print("dopub snapshot");
    // tasks.publishMavenPublicationToKISnapshotsRepository.execute()
    dependsOn('publishMavenPublicationToKISnapshotsRepository')
  }
  else {
    // publishMavenPublicationToKIReleasesRepository.execute()
    print("dopub release");
    // tasks.publishMavenPublicationToKIReleasesRepository.execute()
    dependsOn('publishMavenPublicationToKIReleasesRepository')
  }
}

publishing {
  repositories {
    maven {
      name "KISnapshots"
      url "http://nexus.k-int.com/content/repositories/snapshots/"
      credentials {
        username project.hasProperty('knowintNexusUser') ? knowintNexusUser :''
        password project.hasProperty('knowintNexusPass') ? knowintNexusPass :''
      }
    }

    maven  {
      name "KIReleases"
      url "http://nexus.k-int.com/content/repositories/releases/"
      credentials {
        username project.hasProperty('knowintNexusUser') ? knowintNexusUser :''
        password project.hasProperty('knowintNexusPass') ? knowintNexusPass :''
      }
    }
  }
}

